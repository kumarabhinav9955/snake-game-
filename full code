#importing libraries 
import turtle
import random
import time

#you may import extra libraries also as per you wish

#creating turtle screen (Main Screen)
screen = turtle.Screen()
screen.title('SNAKE GAME')
screen.setup(width = 1000, height = 1000)
screen.tracer(0)
turtle.bgcolor('black')

#creating a border for snake game

turtle.speed(5)
turtle.pensize(4)
turtle.penup()
turtle.goto(-310,250)
turtle.pendown()
turtle.color('white')
turtle.forward(600)
turtle.right(90)
turtle.forward(500)
turtle.right(90)
turtle.forward(600)
turtle.right(90)
turtle.forward(500)
turtle.penup()
turtle.hideturtle()

#score ( update just after eating food)
score = 0
delay = 0.1

#snake ( snake makeing )
snake = turtle.Turtle()
snake.speed(0)
snake.shape('square')
snake.color("white")
snake.penup()
snake.goto(0,0)
snake.direction = 'stop'


#food (food that snake eats)
fruit = turtle.Turtle()
fruit.speed(0)
fruit.shape('circle')
fruit.color('red')
fruit.penup()
fruit.goto(30,30)

old_fruit=[]


#scoring (score updated after you killed)
scoring = turtle.Turtle()
scoring.speed(0)
scoring.color("#ffffff")
scoring.penup()
scoring.hideturtle()
scoring.goto(0,300)
scoring.write("Score :",align="center",font=("#ffffff",30,"bold"))


#define how to move snake 
def snake_go_up():
    if snake.direction != "down":
        snake.direction = "up"

def snake_go_down():
    if snake.direction != "up":
        snake.direction = "down"

def snake_go_left():
    if snake.direction != "right":
        snake.direction = "left"

def snake_go_right():
    if snake.direction != "left":
        snake.direction = "right"

def snake_move():
    if snake.direction == "up":
        y = snake.ycor()
        snake.sety(y + 30)

    if snake.direction == "down":
        y = snake.ycor()
        snake.sety(y - 30)

    if snake.direction == "left":
        x = snake.xcor()
        snake.setx(x - 30)

    if snake.direction == "right":
        x = snake.xcor()
        snake.setx(x + 30)

# Keyboard bindings (To setup how keyboard works)
screen.listen()
screen.onkeypress(snake_go_up, "Up")
screen.onkeypress(snake_go_down, "Down")
screen.onkeypress(snake_go_left, "Left")
screen.onkeypress(snake_go_right, "Right")

#main loop (loop in which game runs )

while True:
        screen.update()
            #snake and fruit coliisions
        if snake.distance(fruit)< 30:
                x = random.randint(-290,270)
                y = random.randint(-240,240)
                fruit.goto(x,y)
                scoring.clear()
                score+=1
                scoring.write("Score:{}".format(score),align="center",font=("#ffffff",24,"bold"))
                delay-=0.001
                
                # creating new_ball
                new_fruit = turtle.Turtle()
                new_fruit.speed(0)
                new_fruit.shape('square')
                new_fruit.color('red')
                new_fruit.penup()
                old_fruit.append(new_fruit)
                

        #adding ball to snake
        
        for index in range(len(old_fruit)-1,0,-1):
                a = old_fruit[index-1].xcor()
                b = old_fruit[index-1].ycor()

                old_fruit[index].goto(a,b)
                                     
        if len(old_fruit)>0:
                a= snake.xcor()
                b = snake.ycor()
                old_fruit[0].goto(a,b)
        snake_move()

        #snake and border collision    
        if snake.xcor()>280 or snake.xcor()< -300 or snake.ycor()>240 or snake.ycor()<-240:
                time.sleep(0.1)
                screen.clear()
                screen.bgcolor('black')
                scoring.goto(0,0)
                scoring.write("GAME OVER Buddy \n Try Again \n Your Score is  {}".format(score),align="center",font=("Lato",30,"bold"))
                


        #snake collision
        for food in old_fruit:
                if food.distance(snake) < 30:
                        time.sleep(0.1)
                        screen.clear()
                        screen.bgcolor('red')
                        scoring.goto(0,0)
                        scoring.write("GAME OVER Buddy \n Try Again \n Your Score is  {}".format(score),align="center",font=("Lato",30,"bold"))
                        scoring.write("Try Again")


                
        time.sleep(delay)

turtle.Terminator()






